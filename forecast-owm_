#! /usr/bin/python3

# Munin weather plugin
#
# A Munin plugin that retrieves the current weather from OpenWeatherMap
#
# OpenWeatherMap
# --------------
# The OpenWeatherMap free plan is restricted to
#     * 60 requests per minute
#     * 1 million requests per month
#
# Munin does a request every 5 minutes for each location, or 8928 requests per 31-day month
#
# The free plan restrictions therefore allow
#
#     * 60 locations, limited by 60 requests per minute, because all of the requests happen
#       within the first few seconds of the start of the 5 minute cycle.
#
#     * 112 locations, calculated as (1 million req/month / 8928 req/month/location)
#


import datetime
import json
import os
import sys
import time

import weather
import openweathermap


verbose = True if os.getenv('MUNIN_DEBUG') == '1' else False
def verboselog(s):
    if verbose:
        sys.stderr.write('{}: {}\n'.format(plugin_name, s))

plugin_name = os.path.basename(sys.argv[0])
script_name, hostname = plugin_name.split('_')


location = {
    'name': os.getenv('LOCATION_NAME'),
    'lat':  os.getenv('LOCATION_LAT'),
    'lon':  os.getenv('LOCATION_LON'),
    'alt':  os.getenv('LOCATION_ALT'),
    'icao': os.getenv('LOCATION_ICAO'),
    'port': os.getenv('LOCATION_PORT'),
}

forecast_periods = [
    '1d',
    '2d',
    '3d',
    '4d',
    '5d',
]


attribution = 'Weather data provided by OpenWeather https://openweathermap.org'
abbrev = 'OWM'

#graph = os.getenv('WEATHER_SHOW_GRAPH')
#graph_str = 'graph no' # if graph else 'graph no'
graph_str = 'graph yes'


_graph_specs = [
    {
        'name': 'temperature',
        'config': [
            'graph_title Temperature forecast',
            'graph_info {att}'.format(att=attribution),
            'graph_category weather',
            'graph_args --lower-limit -10 --upper-limit 40',
            'graph_vlabel Temperature (°C)',
            graph_str,
            'update_rate 3600',  # 1 hour update rate
            'graph_data_size custom 4000d',
        ],
        'fields': [
            {
                'name': 'air_temperature_{p}',
                'config': [
                    'label Air temperature {abbr} {p} (°C)',
                ],
                'fmt': '{:0.1f}',
                'param': 'temperature_C',
            },
            {
                'name': 'air_temperature_x_{p}',
                'config': [
                    'label Air temperature x {abbr} {p} (°C)',
                    'cdef air_temperature_{p},1.1,*',
                ],
                'fmt': None,
                'param': None,
            },
        ],
    },

    {
        'name': 'humidity',
        'config': [
            'graph_title Humidity forecast',
            'graph_info {att}'.format(att=attribution),
            'graph_category weather',
            'graph_args --lower-limit 0 --upper-limit 100 --rigid',
            'graph_vlabel Humidity (%RH)',
            graph_str,
            'update_rate 3600',  # 1 hour update rate
            'graph_data_size custom 4000d',
        ],
        'fields': [
            {
                'name': 'air_humidity_{p}',
                'config': [
                    'label Air humidity {abbr} {p} (%RH)',
                ],
                'fmt': '{:0.0f}',
                'param': 'relative_humidity_pc',
            },
        ],
    },

    {
        'name': 'rain',
        'config': [
            'graph_title Rain forecast',
            'graph_info {att}'.format(att=attribution),
            'graph_category weather',
            'graph_args --lower-limit 0 --upper-limit 10',
            'graph_vlabel Rainfall (mm/h)',
            graph_str,
            'update_rate 3600',  # 1 hour update rate
            'graph_data_size custom 4000d',
        ],
        'fields': [
            {
                'name': 'rain_1h_{p}',
                'config': [
                    'label Rainfall {abbr} {p} (mm/h)',
                ],
                'fmt': '{:0.2f}',
                'param': 'rain_intensity_mm_h',
            },
        ],
    },

    {
        'name': 'cloud',
        'config': [
            'graph_title Cloud cover forecast',
            'graph_info {att}'.format(att=attribution),
            'graph_category weather',
            'graph_args --lower-limit 0 --upper-limit 100 --rigid',
            'graph_vlabel Cloud cover (%)',
            graph_str,
            'update_rate 3600',  # 1 hour update rate
            'graph_data_size custom 4000d',
        ],
        'fields': [
            {
                'name': 'cloud_all_{p}',
                'config': [
                    'label Cloud cover all levels {abbr} {p} (%)',
                ],
                'fmt': '{:0.0f}',
                'param': 'cloud_cover_pc',
            },
        ],
    },

    {
        'name': 'pressure',
        'config': [
            'graph_title Pressure forecast',
            'graph_info {att}'.format(att=attribution),
            'graph_category weather',
            'graph_args --lower-limit 900 --upper-limit 1100 --rigid --y-grid 10:5',
            'graph_scale no',
            'graph_vlabel hPa',
            graph_str,
            'update_rate 3600',  # 1 hour update rate
            'graph_data_size custom 4000d',
        ],
        'fields': [
            {
                'name': 'air_pressure_{p}',
                'config': [
                    'label Air pressure {abbr} {p} (hPa)',
                 ],
                 'fmt': '{:0.0f}',
                 'param': 'pressure_hPa',
             },
         ],
    },

    {
        'name': 'windspeed',
        'config': [
            'graph_title Wind speed forecast',
            'graph_info {att}'.format(att=attribution),
            'graph_category weather',
            'graph_args --lower-limit 0 --upper-limit 40 --rigid',
            'graph_scale no',
            'graph_vlabel knots',
            graph_str,
            'update_rate 3600',  # 1 hour update rate
            'graph_data_size custom 4000d',
        ],
        'fields': [
            {
                'name': 'windspeed_{p}',
                'config': [
                    'label Wind speed {abbr} {p} (knots)',
                    'cdef windspeed_{p},1.944,*',
                ],
                'fmt': '{:0.1f}',
                'param': 'wind_speed_m_s',
            },
            {
                'name': 'windgust_{p}',
                'config': [
                    'label Wind gust {abbr} {p} (knots)',
                    'cdef windgust_{p},1.944,*',
                ],
                'fmt': '{:0.1f}',
                'param': 'wind_gust_m_s',
            },
        ],
    },

    {
        'name': 'winddirection',
        'config': [
            'graph_title Wind direction forecast',
            'graph_info {att}'.format(att=attribution),
            'graph_category weather',
            'graph_args --lower-limit 0 --upper-limit 360 --rigid --y-grid 30:3',
            'graph_scale no',
            'graph_vlabel Wind direction (°)',
            graph_str,
            'update_rate 3600',  # 1 hour update rate
            'graph_data_size custom 4000d',
        ],
        'fields': [
            {
                'name': 'windvector_E_{p}',
                'config': [
                    'label Wind vector {abbr} {p} (E)',
                    'graph no',
                ],
                'fmt': '{:0.3f}',
                'param': 'wind_vector_E',
            },
            {
                'name': 'windvector_N_{p}',
                'config': [
                    'label Wind vector {abbr} {p} (N)',
                    'graph no',
                ],
                'fmt': '{:0.3f}',
                'param': 'wind_vector_N',
            },
            {
                'name': 'winddirection_{p}',
                'config': [
                    'label Wind direction {abbr} {p} (°)',
                    'cdef windvector_N_{p},windvector_E_{p},ATAN2,RAD2DEG,90,EXC,-,360,+,360,%',
                ],
                'fmt': None,
                'param': None,
            },
        ],
    },

]


def config(hostname, location):
    print("host_name {}".format(hostname))
    print()

    for gr in _graph_specs:
        gr_name = gr['name']
        print('multigraph {}_{}'.format(script_name.replace('-', '_'), gr_name))

        for cfg in gr['config']:
            print(cfg)

        for p in forecast_periods:
            for fld in gr['fields']:
                fld_name = fld['name'].format(abbr=abbrev, p=p)
                for cfg in fld['config']:
                    cfg1 = cfg.format(abbr=abbrev, p=p)
                    print('{}.{}'.format(fld_name, cfg1))
        print()


def fetch(hostname, loc):
    secrets = {
        'api_key': os.environ['OWM_APIKEY']
    }

    forecasts = weather.load(openweathermap.service_forecast, location, secrets)
    report = forecasts[0]

    t_now_s = int(time.time())
    t_3h_s = (int(t_now_s / (3*3600))+1) * (3*3600)

    for gr in _graph_specs:
        gr_name = gr['name']
        print('multigraph {}_{}'.format(script_name.replace('-', '_'), gr_name))

        for p in forecast_periods:
            offset_s = int(p[0]) * 86400
            index = int(offset_s / (3*3600)) - 1
            t_forecast_s = t_3h_s + offset_s
#            index = int(t_forecast_s / (3*3600))
#            print(t_now_s, t_3h_s, t_forecast_s, index)

            report = forecasts[index]

            for fld in gr['fields']:
                fld_name = fld['name'].format(p=p)
                param_name = fld['param']
                fmt = fld['fmt']

                if param_name is not None:
                    try:
                        value = report._asdict()[param_name]
                    except KeyError:
                        value = None

                    if value is not None:
                        value_fmt = fmt.format(value)
                    else:
                        value_fmt = 'U'

                    print('{}.value {}'.format(fld_name, value_fmt))
        print()


if len(sys.argv) > 1:
    cmd = sys.argv[1]
    if cmd == 'config':
        config(hostname, location)
        if True:  # if we support dirtyconfig
            fetch(hostname, location)
        sys.exit(0)

    if cmd == 'suggest':
        sys.exit(0)

    verboselog('unknown argument "{}"'.format(cmd))
    exit(1)

fetch(hostname, location)
