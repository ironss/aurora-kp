#! /usr/bin/python3

# Munin weather plugin
#
# A Munin plugin that retrieves the current weather from OpenWeatherMap
#
# OpenWeatherMap
# --------------
# The OpenWeatherMap free plan is restricted to
#     * 60 requests per minute
#     * 1 million requests per month
#
# Munin does a request every 5 minutes for each location, or 8928 requests per 31-day month
#
# The free plan restrictions therefore allow
#
#     * 60 locations, limited by 60 requests per minute, because all of the requests happen
#       within the first few seconds of the start of the 5 minute cycle.
#
#     * 112 locations, calculated as (1 million req/month / 8928 req/month/location)
#


import datetime
import json
import os
import sys
import time

import weather
import openweathermap


verbose = True if os.getenv('MUNIN_DEBUG') == '1' else False
def verboselog(s):
    if verbose:
        sys.stderr.write('{}: {}\n'.format(plugin_name, s))

plugin_name = os.path.basename(sys.argv[0])
script_name, hostname = plugin_name.split('_')


location = {
    'name': os.getenv('LOCATION_NAME'),
    'lat':  os.getenv('LOCATION_LAT'),
    'lon':  os.getenv('LOCATION_LON'),
    'alt':  os.getenv('LOCATION_ALT'),
    'icao': os.getenv('LOCATION_ICAO'),
    'port': os.getenv('LOCATION_PORT'),
}


attribution = 'Weather data provided by OpenWeather https://openweathermap.org'
abbrev = 'OWM'

#show_graph = os.getenv('WEATHER_SHOW_GRAPH')
update_rate_s = 3600
graph_data_size = 'custom 4000d'

#show_graph_str = 'graph no' # if graph else 'graph no'
show_graph_str = 'graph yes'
update_rate_str = 'update_rate {}'.format(update_rate_s)
graph_data_size_str = 'graph_data_size {}'.format(graph_data_size)


_graph_specs = [
    {
        'name': 'temperature',
        'config': [
            'graph_title Temperature',
            'graph_info {att}'.format(att=attribution),
            'graph_category weather',
            'graph_args --lower-limit -10 --upper-limit 40',
            'graph_vlabel Temperature (째C)',
            show_graph_str,
            update_rate_str,
            graph_data_size_str,
        ],
        'fields': [
            {
                'name': 'air_temperature',
                'config': [
                    'label Air temperature {} (째C)'.format(abbrev),
                ],
                'fmt': '{:0.1f}',
                'param': 'temperature_C',
            },
        ],
    },

    {
        'name': 'humidity',
        'config': [
            'graph_title Humidity',
            'graph_info {att}'.format(att=attribution),
            'graph_category weather',
            'graph_args --lower-limit 0 --upper-limit 100 --rigid',
            'graph_vlabel Humidity (%RH)',
            show_graph_str,
            update_rate_str,
            graph_data_size_str,
        ],
        'fields': [
            {
                'name': 'air_humidity',
                'config': [
                    'label Air humidity {} (%RH)'.format(abbrev),
                ],
                'fmt': '{:0.0f}',
                'param': 'relative_humidity_pc',
            },
        ],
    },

    {
        'name': 'rain',
        'config': [
            'graph_title Rain',
            'graph_info {att}'.format(att=attribution),
            'graph_category weather',
            'graph_args --lower-limit 0 --upper-limit 10',
            'graph_vlabel Rainfall (mm/h)',
            show_graph_str,
            update_rate_str,
            graph_data_size_str,
        ],
        'fields': [
            {
                'name': 'rain_1h',
                'config': [
                    'label Rainfall {} (mm/h)'.format(abbrev),
                ],
                'fmt': '{:0.2f}',
                'param': 'rain_intensity_mm_h',
            },
        ],
    },

    {
        'name': 'cloud',
        'config': [
            'graph_title Cloud cover',
            'graph_info {att}'.format(att=attribution),
            'graph_category weather',
            'graph_args --lower-limit 0 --upper-limit 100 --rigid',
            'graph_vlabel Cloud cover (%)',
            show_graph_str,
            update_rate_str,
            graph_data_size_str,
        ],
        'fields': [
            {
                'name': 'cloud_all',
                'config': [
                    'label Cloud cover all levels {} (%)'.format(abbrev),
                ],
                'fmt': '{:0.0f}',
                'param': 'cloud_cover_pc',
            },
        ],
    },

    {
        'name': 'pressure',
        'config': [
            'graph_title Pressure',
            'graph_info {att}'.format(att=attribution),
            'graph_category weather',
            'graph_args --lower-limit 900 --upper-limit 1100 --rigid --y-grid 10:5',
            'graph_scale no',
            'graph_vlabel hPa',
            show_graph_str,
            update_rate_str,
            graph_data_size_str,
        ],
        'fields': [
            {
                'name': 'air_pressure',
                'config': [
                    'label Air pressure {} (hPa)'.format(abbrev),
                 ],
                 'fmt': '{:0.0f}',
                 'param': 'pressure_hPa',
             },
         ],
    },

    {
        'name': 'windspeed',
        'config': [
            'graph_title Wind speed',
            'graph_info {att}'.format(att=attribution),
            'graph_category weather',
            'graph_args --lower-limit 0 --upper-limit 40 --rigid',
            'graph_scale no',
            'graph_vlabel knots',
            show_graph_str,
            update_rate_str,
            graph_data_size_str,
        ],
        'fields': [
            {
                'name': 'windspeed',
                'config': [
                    'label Wind speed {} (knots)'.format(abbrev),
                    'cdef windspeed,1.944,*',
                ],
                'fmt': '{:0.1f}',
                'param': 'wind_speed_m_s',
            },
            {
                'name': 'windgust',
                'config': [
                    'label Wind gust {} (knots)'.format(abbrev),
                    'cdef windgust,1.944,*',
                ],
                'fmt': '{:0.1f}',
                'param': 'wind_gust_m_s',
            },
        ],
    },

    {
        'name': 'winddirection',
        'config': [
            'graph_title Wind direction',
            'graph_info {att}'.format(att=attribution),
            'graph_category weather',
            'graph_args --lower-limit 0 --upper-limit 360 --rigid --y-grid 30:3',
            'graph_scale no',
            'graph_vlabel Wind direction (째)',
            show_graph_str,
            update_rate_str,
            graph_data_size_str,
        ],
        'fields': [
            {
                'name': 'windvector_E',
                'config': [
                    'label Wind vector {} E'.format(abbrev),
                    'graph no',
                ],
                'fmt': '{:0.3f}',
                'param': 'wind_vector_E',
            },
            {
                'name': 'windvector_N',
                'config': [
                    'label Wind vector {} N'.format(abbrev),
                    'graph no',
                ],
                'fmt': '{:0.3f}',
                'param': 'wind_vector_N',
            },
            {
                'name': 'winddirection',
                'config': [
                    'label Wind direction {} (째)'.format(abbrev),
                    'cdef windvector_N,windvector_E,ATAN2,RAD2DEG,90,EXC,-,360,+,360,%',
                ],
                'fmt': None,
                'param': None,
            },
        ],
    },

]


def config(hostname, location):
    print("host_name {}".format(hostname))
    print()

    for gr in _graph_specs:
        gr_name = gr['name']
        print('multigraph {}_{}'.format(script_name.replace('-', '_'), gr_name))

        for cfg in gr['config']:
            print(cfg)

        for fld in gr['fields']:
            fld_name = fld['name']
            for cfg in fld['config']:
                print('{}.{}'.format(fld_name, cfg))
        print()


def fetch(hostname, loc):
    secrets = {
        'api_key': os.environ['OWM_APIKEY']
    }

    report = weather.load(openweathermap.service_weather, location, secrets)
    for gr in _graph_specs:
        gr_name = gr['name']
        print('multigraph {}_{}'.format(script_name.replace('-', '_'), gr_name))

        for fld in gr['fields']:
            fld_name = fld['name']
            param_name = fld['param']
            fmt = fld['fmt']

            if param_name is not None:
                try:
                    value = report._asdict()[param_name]
                except KeyError:
                    value = None

                if value is not None:
                    value_fmt = fmt.format(value)
                else:
                    value_fmt = 'U'

                print('{}.value {}'.format(fld_name, value_fmt))
        print()


if len(sys.argv) > 1:
    cmd = sys.argv[1]
    if cmd == 'config':
        config(hostname, location)
        if True:  # if we support dirtyconfig
            fetch(hostname, location)
        sys.exit(0)

    if cmd == 'suggest':
        sys.exit(0)

    verboselog('unknown argument "{}"'.format(cmd))
    exit(1)

fetch(hostname, location)
