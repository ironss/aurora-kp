#! /usr/bin/python3

# Munin weather plugin
# 
# A Munin plugin that retrieves the current weather from OpenWeatherMap and/or Apple WeatherKit
# 
# OpenWeatherMap
# --------------
# The OpenWeatherMap free plan is restricted to 
#     * 60 requests per minute
#     * 1 million requests per month
# 
# Munin does a request every 5 minutes for each location, or 8928 requests per 31-day month
# 
# The free plan restrictions therefore allow
# 
#     * 60 locations, limited by 60 requests per minute, because all of the requests happen
#       within the first few seconds of the start of the 5 minute cycle.
# 
#     * 112 locations, calculated as (1 million req/month / 8928 req/month/location)
#


import datetime
import os
import sys

import weather
import openweathermap

verbose = True if os.getenv('MUNIN_DEBUG') == '1' else False


def verboselog(s):
    if verbose:
        sys.stderr.write('{}: {}\n'.format(plugin_name, s))


_locations = {
    'Christchurch.nz.place'  : ( 'Christchurch, NZ'       , -43.4821,  172.5500,   37),
    'Lyttelton.nz.place'     : ( 'Lyttelton, NZ'          , -43.6000,  172.7200,    0),
    'Nelson.nz.place'        : ( 'Nelson, NZ'             , -41.2980,  173.2210,    5),
    'Scott-Base.nz.place'    : ( 'Scott Base, NZ'         , -77.8491,  166.7682,   10),

    'SANAE4.za.place'        : ( 'SANAE IV, ZA'           , -71.6724,   -2.8249,  850),

    'Wichita.ka.us.place'    : ( 'Wichita, KA, US'        ,  37.6889,  -97.3361,  400),
    'Amundsen-Scott.us.place': ( 'Amundsen-Scott Base, US', -90.0000,    0.0000, 2835),
}

plugin_name = os.path.basename(sys.argv[0])
script_name, hostname = plugin_name.split('_')
location = _locations[hostname]

_graph_specs = [
    {   
        'name': 'temperature',
        'config': [
            'graph_title Temperature',
            'graph_info Weather data provided by OpenWeather https://openweathermap.org/',
            'graph_category weather',
            'graph_args --lower-limit -10 --upper-limit 40',
            'graph_vlabel °C',
            'graph_order air_temperature air_temperature_awk=Places;{}:weatherkit_temperature.air_temperature'.format(hostname)
        ],
        'fields': [
            {
                'name': 'air_temperature',
                'config': [
                    'label Air temperature OWM (°C)',
                ],
                'fmt': '{:0.1f}',
                'param': 'temperature_C',
            },
            {
                'name': 'air_temperature_awk',
                'config': [
                    'label Air temperature AWK (°C)',
                ],
                'fmt': None,
                'param': None,
            },
        ],
    },

    {   
        'name': 'humidity',
        'config': [
            'graph_title Humidity',
            'graph_info Weather data provided by OpenWeather https://openweathermap.org/',
            'graph_category weather',
            'graph_args --lower-limit 0 --upper-limit 100 --rigid',
            'graph_vlabel Humidity (%RH)',
            'graph_order air_humidity air_humidity_awk=Places;{hn}:weatherkit_humidity.air_humidity'.format(hn=hostname),
        ],
        'fields': [
            {
                'name': 'air_humidity',
                'config': [
                    'label Air humidity OWM (%RH)',
                ],
                'fmt': '{:0.0f}',
                'param': 'relative_humidity_pc',
            },
            {
                'name': 'air_humidity_awk',
                'config': [
                    'label Air humidity AWK (%RH)',
                ],
                'fmt': None,
                'param': None,
            },
        ],
    },

    {
        'name': 'pressure',
        'config': [
            'graph_title Pressure',
            'graph_info Weather data provided by OpenWeather https://openweathermap.org/',
            'graph_category weather',
            'graph_args --lower-limit 900 --upper-limit 1100 --rigid --y-grid 10:5',
            'graph_scale no',
            'graph_vlabel hPa',
            'graph_order air_pressure air_pressure_awk=Places;{hn}:weatherkit_pressure.air_pressure'.format(hn=hostname),
        ],
        'fields': [
            {
                'name': 'air_pressure',
                'config': [
                    'label Air pressure OWM (hPa)',
                 ],
                 'fmt': '{:0.0f}',
                 'param': 'pressure_hPa',
             },
            {
                'name': 'air_pressure_awk',
                'config': [
                    'label Air pressure AWK (hPa)',
                 ],
                 'fmt': None,
                 'param': None,
             },
         ],
    },
    
    {
        'name': 'windspeed',
        'config': [
            'graph_title Wind speed',
            'graph_info Weather data provided by OpenWeather https://openweathermap.org/',
            'graph_category weather',
            'graph_args --lower-limit 0 --upper-limit 40 --rigid',
            'graph_scale no',
            'graph_vlabel knots',
            'graph_order windspeed windgust windspeed_awk=Places;{hn}:weatherkit_windspeed.windspeed windgust_awk=Places;{hn}:weatherkit_windspeed.windgust'.format(hn=hostname),
        ],
        'fields': [
            {
                'name': 'windspeed',
                'config': [
                    'label Wind speed OWM (knots)',
                    'cdef windspeed,1.944,*',
                ],
                'fmt': '{:0.1f}',
                'param': 'wind_speed_m_s',
            },
            {
                'name': 'windgust',
                'config': [
                    'label Wind gust OWM (knots)',
                    'cdef windgust,1.944,*',
                ],
                'fmt': '{:0.1f}',
                'param': 'wind_gust_m_s',
            },

            {
                'name': 'windspeed_awk',
                'config': [
                    'label Wind speed AWK (knots)',
                    'cdef windspeed_awk,1.944,*',
                ],
                'fmt': None,
                'param': None,
            },
            {
                'name': 'windgust_awk',
                'config': [
                    'label Wind gust AWK (knots)',
                    'cdef windgust_awk,1.944,*',
                ],
                'fmt': None,
                'param': None,
            },
        ],
    },

    {
        'name': 'winddirection',
        'config': [
            'graph_title Wind direction',
            'graph_info Weather data provided by OpenWeather https://openweathermap.org/',
            'graph_category weather',
            'graph_args --lower-limit 0 --upper-limit 360 --rigid --y-grid 30:3',
            'graph_scale no',
            'graph_vlabel Wind direction (°)',
            'graph_order winddirection windvector_E_awk=Places;{hn}:weatherkit_winddirection.windvector_E windvector_N_awk=Places;{hn}:weatherkit_winddirection.windvector_N'.format(hn=hostname),
        ],
        'fields': [
            {
                'name': 'windvector_E',
                'config': [
                    'label Wind vector E',
                    'graph no',
                ],
                'fmt': '{:0.3f}',
                'param': 'wind_vector_E',
            },
            {
                'name': 'windvector_N',
                'config': [
                    'label Wind vector N',
                    'graph no',
                ],
                'fmt': '{:0.3f}',
                'param': 'wind_vector_N',
            },
            {
                'name': 'winddirection',
                'config': [
                    'label Wind direction OWM (°)',
                    'cdef windvector_N,windvector_E,ATAN2,RAD2DEG,90,EXC,-,360,+,360,%',
                ],
                'fmt': None,
                'param': None,
            },

            {
                'name': 'windvector_E_awk',
                'config': [
                    'label Wind vector E',
                    'graph no',
                ],
                'fmt': None,
                'param': None,
            },
            {
                'name': 'windvector_N_awk',
                'config': [
                    'label Wind vector N',
                    'graph no',
                ],
                'fmt': None,
                'param': None,
            },
            {
                'name': 'winddirection_awk',
                'config': [
                    'label Wind direction AWK (°)',
                    'cdef windvector_N_awk,windvector_E_awk,ATAN2,RAD2DEG,90,EXC,-,360,+,360,%',
                ],
                'fmt': None,
                'param': None,
            },
        ],
    },

    {
        'name': 'winddirection_deg',
        'config': [
            'graph_title Wind direction deg',
            'graph_info Weather data provided by OpenWeather https://openweathermap.org/',
            'graph_category weather',
            'graph_args --lower-limit 0 --upper-limit 360 --rigid --y-grid 30:3',
            'graph_scale no',
            'graph_vlabel Wind direction (°)',
            'graph no',
        ],
        'fields': [
            {
                'name': 'wind_direction_deg',
                'config': [
                    'label Wind direction deg',
                ],
                'fmt': '{:0.0f}',
                'param': 'wind_direction_deg',
            },
        ],
    },
    
    {
        'name': 'winddirection_smoothed',
        'config': [
            'graph_title Wind direction 2',
            'graph_info Weather data provided by OpenWeather https://openweathermap.org/',
            'graph_category weather',
            'graph_args --lower-limit 0 --upper-limit 360 --rigid --y-grid 30:3',
            'graph_scale no',
            'graph_vlabel Wind direction (°)',
            'graph_order winddirection_deg=weather_winddirection_deg.wind_direction_deg windvector_E=weather_winddirection.windvector_E windvector_N=weather_winddirection.windvector_N'.format(hn=hostname),
        ],
        'fields': [
            {
                'name': 'windvector_E',
                'config': [
                    'label Wind vector E',
                    'graph no',
                ],
                'fmt': None,
                'param': None,
            },
            {
                'name': 'windvector_N',
                'config': [
                    'label Wind vector N',
                    'graph no',
                ],
                'fmt': None,
                'param': None,
            },
            {
                'name': 'winddirection',
                'config': [
                    'label Wind direction OWM (°)',
                    'cdef windvector_N,windvector_E,ATAN2,RAD2DEG,90,EXC,-,360,+,360,%',
                ],
                'fmt': None,
                'param': None,
            },
            {
                'name': 'winddirection_smoothed',
                'config': [
                    'label Wind direction OWM smoothed (°)',
                    'cdef windvector_N,3600,TRENDNAN,windvector_E,1800,TRENDNAN,ATAN2,RAD2DEG,90,EXC,-,360,+,360,%',
                ],
                'fmt': None,
                'param': None,
            },
            {
                'name': 'winddirection_deg',
                'config': [
                    'label Wind direction deg OWM (°)',
                    'cdef winddirection_deg,3600,TRENDNAN',
                ],
                'fmt': None,
                'param': None,
            },

        ],
    },

]


def config(hostname, location):
    print("host_name {}".format(hostname))
    print()

    for gr in _graph_specs:
        gr_name = gr['name']
        print('multigraph {}_{}'.format(script_name, gr_name))
        
        for cfg in gr['config']:
            print(cfg)
        
        for fld in gr['fields']:
            fld_name = fld['name']
            for cfg in fld['config']:
                print('{}.{}'.format(fld_name, cfg))
        print()
        
        
def fetch(hostname, loc):
    location = { k: loc[i] for i, k in enumerate(['name', 'lat', 'lon', 'alt']) }
    secrets = {
        'api_key': os.environ['OWM_API_KEY']
    }
   
    report = weather.load_report(openweathermap.service, location, secrets)

    for gr in _graph_specs:
        gr_name = gr['name']
        print('multigraph {}_{}'.format(script_name, gr_name))
        
        for fld in gr['fields']:
            fld_name = fld['name']
            param_name = fld['param']
            fmt = fld['fmt']
            
            if param_name is not None:
                try:
                    value = report._asdict()[param_name]
                except KeyError:
                    value = None
                    
                if value is not None:                    
                    value_fmt = fmt.format(value)
                else:
                    value_fmt = 'U'
                    
                print('{}.value {}'.format(fld_name, value_fmt))
        print()
    

if len(sys.argv) > 1:
    cmd = sys.argv[1]
    if cmd == 'config':
        config(hostname, location)
        if True:  # if we support dirtyconfig
            fetch(hostname, location)
        sys.exit(0)

    if cmd == 'suggest':
        sys.exit(0)

    verboselog('unknown argument "{}"'.format(cmd))
    exit(1)

fetch(hostname, location)

